// ------------ logical.asa ------------
// Contains functions to simplify conditions.
// These are *not* bitwise operations but logical, meaning that they work with 0 (False) and 1 (True)
// However, if you wish to find the bitwise operations you can find them in bitwise.asa

// equals?: pushes 1 to stack if the values on top of the stack are equal, 0 otherwise
def equals?:
  pop a; pop b;
  push a; push b; cmp; pop comparison;
  push comparison; ifgoto -1 a_neq_b;  // if a  < b return 0
  push comparison; ifgoto 1 a_neq_b;   // if a  > b return 0
  push 1; pop res; goto return;        // if a == b return 1
  label a_neq_b; push 0; pop res;
  label return;  push res;
end

// not_equals?: pushes 1 to stack if the values on top of the stack are not equal, 0 otherwise
def not_equals?:
  pop a; pop b;
  push a; push b; call logical/equals?; ifgoto 0 not_equal;  // if a != b return 1
  push 0; pop res; goto return;                              // if a == b return 0
  label not_equal; push 1; pop res;
  label return;    push res;
end

// not: negates the top of the stack (non-zero values to 0 and 0 to 1)
def not:
  pop a;
  push a; push 1; call logical/equals?; ifgoto 1 a_is_one;   // if a == 1 return 0
  push a; push 0; call logical/equals?; ifgoto 1 a_is_zero;  // if a == 0 return 1
  push 0; pop res; goto return;                              // else      return 0
  label a_is_one;  push 0; pop res; goto return;
  label a_is_zero; push 1; pop res;
  label return; push res;
end

// or?: pushes 1 to the stack if one of the two elements on top of the stack is 1, 0 otherwise
def or?:
  pop a; pop b;
  push a; push 1;  call logical/equals?; ifgoto 0 b_cmp;        // if a != 1 try b comparison
  push 1; pop res; goto return;                             // else return 1
  label b_cmp;
    push b; push 1; call logical/equals?; ifgoto 0 or_false;    // if b != 1 return 0
    push 1; pop res; goto return;                           // else return 1
  label or_false; push 0; pop res;
  label return;   push res;
end

// and?: pushes 1 to the stack if both two elements on top of the stack are 1, 0 otherwise
def and?:
  pop a; pop b;
  push a; push 1; call logical/equals?; ifgoto 0 and_false;  // if a != 1 return 0
  push a; push b; call logical/equals?; ifgoto 0 and_false;  // if a != b return 0
  push 1; pop res; goto return;                          // else return 1
  label and_false; push 0; pop res;
  label return;    push res;
end

// xor?: pushes 1 to the stack if only one of the two elements on top of the stack is 1, 0 otherwise
def xor?:
  pop a; pop b;
  push a; push b; call logical/and?; ifgoto 1 xor_false;  // if a and b      return 0
  push a; push b; call logical/or?;  ifgoto 0 xor_false;  // if not (a or b) return 0 
  push 1; pop res; goto return;                           // else return 1
  label xor_false; push 0; pop res;
  label return;    push res;
end

// lesser?: pushes 1 to stack if a (element before top) < b (top of stack), 0 otherwise
def lesser?:
  pop b; pop a;
  push a; push b; cmp; ifgoto -1 is_lesser;  // if a < b return 1
  push 0; pop res; goto return;              // else return 0
  label is_lesser; push 1; pop res;
  label return;  push res;
end

// lesser_or_eq?: pushes 1 to stack if a (element before top) <= b (top of stack), 0 otherwise
def lesser_or_eq?:
  pop b; pop a;
  push a; push b; call logical/equals?; ifgoto 1 is_lesser_or_eq;  // if a == b return 1
  push a; push b; call logical/lesser?; ifgoto 1 is_lesser_or_eq;  // if a  < b return 1
  push 0; pop res; goto return;                                    // else return 0
  label is_lesser_or_eq; push 1; pop res;
  label return; push res;
end

// greater?: pushes 1 to stack if a (element before top) > b (top of stack), 0 otherwise
def greater?:
  pop b; pop a;
  push a; push b; cmp; ifgoto 1 is_greater;  // if a > b return 1
  push 0; pop res; goto return;              // else return 0
  label is_greater; push 1; pop res;
  label return;  push res;
end

// greater_or_eq?: pushes 1 to stack if a (element before top) <= b (top of stack), 0 otherwise
def greater_or_eq?:
  pop b; pop a;
  push a; push b; call logical/equals?; ifgoto 1 is_greater_or_eq;   // if a == b return 1
  push a; push b; call logical/greater?; ifgoto 1 is_greater_or_eq;  // if a  > b return 1
  push 0; pop res; goto return;                                      // else return 0
  label is_greater_or_eq; push 1; pop res;
  label return; push res;
end
