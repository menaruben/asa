import "math.asa";
import "testing.asa";

def modulo_test:
  // -2 mod 5 => 3
  push 3; pop want;
  push -2; push 5; call math/modulo; pop have;
  push have; push want; push "modulo_test_1"; call testing/assert; println;

  // -9 mod 5 => 1
  push 1; pop want;
  push -9; push 5; call math/modulo; pop have;
  push have; push want; push "modulo_test_2"; call testing/assert; println;

  // 4 mod 5  => 4
  push 4; pop want;
  push 4; push 5; call math/modulo; pop have;
  push have; push want; push "modulo_test_3"; call testing/assert; println;

  // 27 mod 5 => 2
  push 2; pop want;
  push 27; push 5; call math/modulo; pop have;
  push have; push want; push "modulo_test_4"; call testing/assert; println;
end

def max_test:
  // max(2, 5) => 5
  push 5; pop want;
  push 2; push 5; call math/max; pop have;
  push have; push want; push "max_test_1"; call testing/assert; println;

  // max(2, 2) => 2
  push 2; pop want;
  push 2; push 2; call math/max; pop have;
  push have; push want; push "max_test_2"; call testing/assert; println;

  // max(5, 2) => 5
  push 5; pop want;
  push 5; push 2; call math/max; pop have;
  push have; push want; push "max_test_3"; call testing/assert; println;
end

def min_test:
  // min(2, 5) => 2
  push 2; pop want;
  push 2; push 5; call math/min; pop have;
  push have; push want; push "min_test_1"; call testing/assert; println;

  // min(2, 2) => 2
  push 2; pop want;
  push 2; push 2; call math/min; pop have;
  push have; push want; push "min_test_2"; call testing/assert; println;

  // min(5, 2) => 2
  push 2; pop want;
  push 5; push 2; call math/min; pop have;
  push have; push want; push "min_test_3"; call testing/assert; println;
end


def ipow_test:
  // 2^5 => 32
  var want 32;
  push 2; push 5; call math/ipow; pop have;
  push have; push want; push "ipow_test_1"; call testing/assert; println;

  // 8^0 => 1
  var want 1;
  push 8; push 0; call math/ipow; pop have;
  push have; push want; push "ipow_test_2"; call testing/assert; println;

  // 4^(-3) => 0.015625
  push 0.015625f; pop want;
  push 4; push -3; call math/ipow; pop have;
  push have; push want; push "ipow_test_3"; call testing/assert; println;
end

def iroot_test:
  // 32^(1/5) => 2
  var want 2;
  push 32; push 5; call math/iroot; pop have;
  push have; push want; push "iroot_test_1"; call testing/assert; println;

  // 8^(1/1) => 8
  var want 8;
  push 8; push 1; call math/iroot; pop have;
  push have; push want; push "iroot_test_2"; call testing/assert; println;

  // 8^(1/3) = 2
  push 2; pop want;
  push 8; push 3; call math/iroot; pop have;
  push have; push want; push "iroot_test_3"; call testing/assert; println;

  // 420^(1/69) = 1.091485839346317601
  push 1.091485839346317601f; pop want;
  push 420; push 69; call math/iroot; pop have;
  push have; push want; push "iroot_test_4"; call testing/assert; println;
end

def exp_test:
  // e^2 = 7.389056098930650f
  var want 7.389056098930650f;
  push 2; call math/exp; pop have;
  push have; push want; push "exp_test_1"; call testing/assert; println;

  // e^5 = 148.4131591025766f
  var want 148.4131591025766f;
  push 5; call math/exp; pop have;
  push have; push want; push "exp_test_2"; call testing/assert; println;
end

def abs_test:
  // abs(-4) => 4
  push 4; pop want;
  push -4; call math/abs; pop have;
  push have; push want; push "abs_test_1"; call testing/assert; println;

  // abs(7)  => 7
  push 7; pop want;
  push 7; call math/abs; pop have;
  push have; push want; push "abs_test_2"; call testing/assert; println;

  // abs(0)  => 0
  push 0; pop want;
  push 0; call math/abs; pop have;
  push have; push want; push "abs_test_3"; call testing/assert; println;
end

def even_test:
  // even(16) => 1
  push 1; pop want;
  push 16; call math/even?; pop have;
  push have; push want; push "even_test_1"; call testing/assert; println;

  // even(31) => 0
  push 0; pop want;
  push 31; call math/even?; pop have;
  push have; push want; push "even_test_2"; call testing/assert; println;
end

def factorial_test:
  // 5! => 120
  var want 120;
  push 5; call math/factorial; pop have;
  push have; push want; push "factorial_test_1"; call testing/assert; println;

  // 8! => 40320
  var want 40320;
  push 8; call math/factorial; pop have;
  push have; push want; push "factorial_test_2"; call testing/assert; println;

  // 12! => 479001600
  var want 479001600;
  push 12; call math/factorial; pop have;
  push have; push want; push "factorial_test_3"; call testing/assert; println;

  // 13! => 6227020800 (uses BigInteger <=> long long int)
  var want 6227020800;
  push 13; call math/factorial; pop have;
  push have; push want; push "factorial_test_4"; call testing/assert; println;
end

def binomial_coeff_test:
  // bincoeff(5, 2) => 10
  var want 10;
  push 5; push 2; call math/binomial_coeff; pop have;
  push have; push want; push "binomial_coeff_test_1"; call testing/assert; println;

  // bincoeff(2, 2) => 1
  var want 1;
  push 2; push 2; call math/binomial_coeff; pop have;
  push have; push want; push "binomial_coeff_test_2"; call testing/assert; println;

  // bincoeff(8, 5) => 56
  var want 56;
  push 8; push 5; call math/binomial_coeff; pop have;
  push have; push want; push "binomial_coeff_test_3"; call testing/assert; println;
end

def main:
  call modulo_test;
  call max_test;
  call min_test;
  call exp_test;
  call ipow_test;
  call iroot_test;
  call abs_test;
  call even_test;
  call factorial_test;
  call binomial_coeff_test;
end
