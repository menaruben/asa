import "math.asa";
import "testing.asa";

begin modulo_test:
  // -2 mod 5 => 3
  push 3; pop want;
  push -2; push 5; call math/modulo; pop have;
  push have; push want; push "modulo_test_1"; call testing/assert; println;

  // -9 mod 5 => 1
  push 1; pop want;
  push -9; push 5; call math/modulo; pop have;
  push have; push want; push "modulo_test_2"; call testing/assert; println;

  // 4 mod 5  => 4
  push 4; pop want;
  push 4; push 5; call math/modulo; pop have;
  push have; push want; push "modulo_test_3"; call testing/assert; println;

  // 27 mod 5 => 2
  push 2; pop want;
  push 27; push 5; call math/modulo; pop have;
  push have; push want; push "modulo_test_4"; call testing/assert; println;
end

begin max_test:
  // max(2, 5) => 5
  push 5; pop want;
  push 2; push 5; call math/max; pop have;
  push have; push want; push "max_test_1"; call testing/assert; println;

  // max(2, 2) => 2
  push 2; pop want;
  push 2; push 2; call math/max; pop have;
  push have; push want; push "max_test_2"; call testing/assert; println;

  // max(5, 2) => 5
  push 5; pop want;
  push 5; push 2; call math/max; pop have;
  push have; push want; push "max_test_3"; call testing/assert; println;
end

begin min_test:
  // min(2, 5) => 2
  push 2; pop want;
  push 2; push 5; call math/min; pop have;
  push have; push want; push "min_test_1"; call testing/assert; println;

  // min(2, 2) => 2
  push 2; pop want;
  push 2; push 2; call math/min; pop have;
  push have; push want; push "min_test_2"; call testing/assert; println;

  // min(5, 2) => 2
  push 2; pop want;
  push 5; push 2; call math/min; pop have;
  push have; push want; push "min_test_3"; call testing/assert; println;
end

begin power_test:
  // 2^5 => 32
  push 32; pop want;
  push 2; push 5; call math/power; pop have;
  push have; push want; push "power_test_1"; call testing/assert; println;

  // 8^9 => 134217728
  push 134217728; pop want;
  push 8; push 9; call math/power; pop have;
  push have; push want; push "power_test_2"; call testing/assert; println;

  // 3^4 => 81
  push 81; pop want;
  push 3; push 4; call math/power; pop have;
  push have; push want; push "power_test_3"; call testing/assert; println;
end

begin abs_test:
  // abs(-4) => 4
  push 4; pop want;
  push -4; call math/abs; pop have;
  push have; push want; push "abs_test_1"; call testing/assert; println;

  // abs(7)  => 7
  push 7; pop want;
  push 7; call math/abs; pop have;
  push have; push want; push "abs_test_2"; call testing/assert; println;

  // abs(0)  => 0
  push 0; pop want;
  push 0; call math/abs; pop have;
  push have; push want; push "abs_test_3"; call testing/assert; println;
end

begin even_test:
  // even(16) => 1
  push 1; pop want;
  push 16; call math/even?; pop have;
  push have; push want; push "even_test_1"; call testing/assert; println;

  // even(31) => 0
  push 0; pop want;
  push 31; call math/even?; pop have;
  push have; push want; push "even_test_2"; call testing/assert; println;
end

begin factorial_test:
  // 5! => 120
  var want 120;
  push 5; call math/factorial; pop have;
  push have; push want; push "factorial_test_1"; call testing/assert; println;
  
  // 8! => 40320
  var want 40320;
  push 8; call math/factorial; pop have;
  push have; push want; push "factorial_test_2"; call testing/assert; println;
  
  // 12! => 479001600
  var want 479001600;
  push 12; call math/factorial; pop have;
  push have; push want; push "factorial_test_3"; call testing/assert; println;

  // wont work with normal ints, because it exceeds int_max value:
  // 13! => 6227020800
  // var want 6227020800;
  // push 123; call math/factorial; pop have;
  // push have; push want; push "factorial_test_4"; call testing/assert; println;
end

begin binomial_coeff_test:
  // bincoeff(5, 2) => 10
  var want 10;
  push 5; push 2; call math/binomial_coeff; pop have;
  push have; push want; push "binomial_coeff_test_1"; call testing/assert; println;
  
  // bincoeff(2, 2) => 1
  var want 1;
  push 2; push 2; call math/binomial_coeff; pop have;
  push have; push want; push "binomial_coeff_test_2"; call testing/assert; println;
  
  // bincoeff(8, 5) => 56
  var want 56;
  push 8; push 5; call math/binomial_coeff; pop have;
  push have; push want; push "binomial_coeff_test_3"; call testing/assert; println;
end

begin main:
  call modulo_test;
  call max_test;
  call min_test;
  call power_test;
  call abs_test;
  call even_test;
  call factorial_test;
  call binomial_coeff_test;
end
