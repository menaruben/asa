#pragma once
#include "AsaDouble.hpp"
#include "AsaFloat.hpp"
#include "AsaObject.hpp"
#include "AsaString.hpp"
#include <string>

using namespace asa;

class AsaInteger : public AsaObject {
private:
  int int_value;

public:
  AsaInteger(int val) : AsaObject(to_string(val), Integer), int_value(val) {}

  int get_value() const { return int_value; }
  void set_value(int v) { int_value = v; }
  string str() const { return to_string(int_value); }

  AsaString  add(AsaString o)  { return AsaString(str() + o.get_value()); }
  AsaInteger add(AsaInteger o) { return AsaInteger(int_value + o.get_value()); }
  AsaFloat   add(AsaFloat o)   { return AsaFloat(int_value + o.get_value()); }
  AsaDouble  add(AsaDouble o)  { return AsaDouble(int_value + o.get_value()); }

  AsaInteger sub(AsaInteger o) { return AsaInteger(int_value - o.get_value()); }
  AsaFloat   sub(AsaFloat o)   { return AsaFloat(int_value - o.get_value()); }
  AsaDouble  sub(AsaDouble o)  { return AsaDouble(int_value - o.get_value()); }

  AsaInteger mul(AsaInteger o) { return AsaInteger(int_value * o.get_value()); }
  AsaFloat   mul(AsaFloat o)   { return AsaFloat(int_value * o.get_value()); }
  AsaDouble  mul(AsaDouble o)  { return AsaDouble(int_value * o.get_value()); }

  AsaInteger div(AsaInteger o) { return AsaInteger(int_value / o.get_value()); }
  AsaFloat   div(AsaFloat o)   { return AsaFloat(int_value / o.get_value()); }
  AsaDouble  div(AsaDouble o)  { return AsaDouble(int_value / o.get_value()); }

  AsaInteger lshift(AsaInteger o) { return AsaInteger(int_value << o.get_value()); }
  AsaInteger rshift(AsaInteger o) { return AsaInteger(int_value >> o.get_value()); }

  AsaInteger bitwise_or(AsaInteger o)  { return AsaInteger(int_value | o.get_value()); }
  AsaInteger bitwise_xor(AsaInteger o) { return AsaInteger(int_value ^ o.get_value()); }
  AsaInteger bitwise_and(AsaInteger o) { return AsaInteger(int_value & o.get_value()); }
  AsaInteger bitwise_not()             { return AsaInteger(~int_value); }

  AsaInteger ceil()  { return AsaInteger(int_value); }
  AsaInteger floor() { return AsaInteger(int_value); }
  AsaInteger round() { return AsaInteger(int_value); }

  AsaInteger incr() { return AsaInteger(int_value + 1); }
  AsaInteger decr() { return AsaInteger(int_value - 1); }

  
  AsaInteger cmp(AsaInteger o) {
    if (int_value < o.get_value())  return AsaInteger(-1);
    if (int_value == o.get_value()) return AsaInteger(0);
    return AsaInteger(1);
  }
  
  AsaInteger cmp(AsaFloat o) {
    if (int_value < o.get_value())  return AsaInteger(-1);
    if (int_value == o.get_value()) return AsaInteger(0);
    return AsaInteger(1);
  }
  
  AsaInteger cmp(AsaDouble o) {
    if (int_value < o.get_value())  return AsaInteger(-1);
    if (int_value == o.get_value()) return AsaInteger(0);
    return AsaInteger(1);
  }
};
