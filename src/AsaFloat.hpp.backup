#pragma once

#include "AsaObject.hpp"
#include "AsaDouble.hpp"
#include "AsaObject.hpp"
#include "AsaString.hpp"
#include "AsaInteger.hpp"
#include <string>
#include <cmath>

using namespace asa;

class AsaFloat : public AsaObject {
private:
  float float_value;

public:
  AsaFloat(float val) : AsaObject(to_string(val), Float), float_value(val) {}

  float get_value() const { return float_value; }
  void set_value(float v) { float_value = v; }
  string str() const { return to_string(float_value); }

  AsaString  add(AsaString o)  { return AsaString(str() + o.get_value()); }
  AsaFloat   add(AsaInteger o) { return AsaFloat(float_value + o.get_value()); }
  AsaFloat   add(AsaFloat o)   { return AsaFloat(float_value + o.get_value()); }
  AsaDouble  add(AsaDouble o)  { return AsaDouble(float_value + o.get_value()); }

  AsaFloat   sub(AsaInteger o) { return AsaFloat(float_value - o.get_value()); }
  AsaFloat   sub(AsaFloat o)   { return AsaFloat(float_value - o.get_value()); }
  AsaDouble  sub(AsaDouble o)  { return AsaDouble(float_value - o.get_value()); }

  AsaFloat   mul(AsaInteger o) { return AsaFloat(float_value * o.get_value()); }
  AsaFloat   mul(AsaFloat o)   { return AsaFloat(float_value * o.get_value()); }
  AsaDouble  mul(AsaDouble o)  { return AsaDouble(float_value * o.get_value()); }

  AsaFloat   div(AsaInteger o) { return AsaFloat(float_value / o.get_value()); }
  AsaFloat   div(AsaFloat o)   { return AsaFloat(float_value / o.get_value()); }
  AsaDouble  div(AsaDouble o)  { return AsaDouble(float_value / o.get_value()); }

  AsaFloat ceil()  { return AsaFloat(std::ceil(float_value)); }
  AsaFloat floor() { return AsaFloat(std::floor(float_value)); }
  AsaFloat round() { return AsaFloat(std::round(float_value)); }

  AsaFloat incr() { return AsaFloat(float_value + 1); }
  AsaFloat decr() { return AsaFloat(float_value - 1); }

  AsaInteger cmp(AsaInteger o) {
    if (float_value < o.get_value())  return AsaInteger(-1);
    if (float_value == o.get_value()) return AsaInteger(0);
    return AsaInteger(1);
  }
  
  AsaInteger cmp(AsaFloat o) {
    if (float_value < o.get_value())  return AsaInteger(-1);
    if (float_value == o.get_value()) return AsaInteger(0);
    return AsaInteger(1);
  }
  
  AsaInteger cmp(AsaDouble o) {
    if (float_value < o.get_value())  return AsaInteger(-1);
    if (float_value == o.get_value()) return AsaInteger(0);
    return AsaInteger(1);
  }
};
